/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccessKeyPropType, AlertType, AlertVariant, AlignPropType, AlternativeButtonLinkRolePropType, AriaCurrentValuePropType, BreadcrumbLinkProps, ButtonCallbacksPropType, ButtonOrLinkOrTextWithChildrenProps as ButtonOrLinkOrTextWithChildrenProps1, ButtonProps, ButtonTypePropType, ButtonVariantPropType, CSSResize, CustomClassPropType, DownloadPropType, ErrorListPropType, EventCallbacks, HeadingLevel, HeadingVariantPropType, HrefPropType, IconsPropType, IdPropType, ImageSourcePropType, InputCheckboxIconsProp, InputCheckboxVariant, InputDateType, InputTextType, InputTypeOnDefault, InputTypeOnOff, Iso8601, KoliBriAccordionCallbacks, KoliBriAlertEventCallbacks, KoliBriCardEventCallbacks, KoliBriFormCallbacks, KoliBriHorizontalIcons, KoliBriIconsProp, KoliBriModalEventCallbacks, KoliBriPaginationButtonCallbacks, KoliBriProgressVariantType, KoliBriQuoteVariant, KoliBriTableDataType, KoliBriTableHeaders, KoliBriTablePaginationProps, KoliBriTabsCallbacks, LabelPropType, LabelWithExpertSlotPropType, LinkOnCallbacksPropType, LinkProps, LinkTargetPropType, ListStyleType, Loading, MaxPropType, NamePropType, OpenPropType, OptionsPropType, OptionsWithOptgroupPropType, Orientation, PaginationHasButton, PaginationPositionPropType, PropColor, RowsPropType, SpinVariantPropType, StencilUnknown, Stringified, SuggestionsPropType, SyncValueBySelectorPropType, TabButtonProps, Toast, ToastState, TooltipAlignPropType, W3CInputValue } from "@public-ui/schema";
import { ButtonOrLinkOrTextWithChildrenProps } from "./types/button-link-text";
import { FontAwesome, FontAwesomeOssPrefix } from "./enums/font-awesome";
import { Icofont } from "./types/icofont";
import { LabelPropType as LabelPropType1, LabelWithExpertSlotPropType as LabelWithExpertSlotPropType1 } from "./types/props/label";
import { Stringified as Stringified1 } from "./types/common";
import { InputTypeOnDefault as InputTypeOnDefault1, Option } from "./types/input/types";
import { W3CInputValue as W3CInputValue1 } from "./types/w3c";
import { Orientation as Orientation1 } from "./types/orientation";
import { Bundesamt, Bundesanstalt, Bundesministerium } from "./enums/bund";
import { HeadingLevel as HeadingLevel1 } from "./types/heading-level";
import { KoliBriToastEventCallbacks } from "./types/toast";
import { AlertType as AlertType1 } from "./components/alert/types";
export { AccessKeyPropType, AlertType, AlertVariant, AlignPropType, AlternativeButtonLinkRolePropType, AriaCurrentValuePropType, BreadcrumbLinkProps, ButtonCallbacksPropType, ButtonOrLinkOrTextWithChildrenProps as ButtonOrLinkOrTextWithChildrenProps1, ButtonProps, ButtonTypePropType, ButtonVariantPropType, CSSResize, CustomClassPropType, DownloadPropType, ErrorListPropType, EventCallbacks, HeadingLevel, HeadingVariantPropType, HrefPropType, IconsPropType, IdPropType, ImageSourcePropType, InputCheckboxIconsProp, InputCheckboxVariant, InputDateType, InputTextType, InputTypeOnDefault, InputTypeOnOff, Iso8601, KoliBriAccordionCallbacks, KoliBriAlertEventCallbacks, KoliBriCardEventCallbacks, KoliBriFormCallbacks, KoliBriHorizontalIcons, KoliBriIconsProp, KoliBriModalEventCallbacks, KoliBriPaginationButtonCallbacks, KoliBriProgressVariantType, KoliBriQuoteVariant, KoliBriTableDataType, KoliBriTableHeaders, KoliBriTablePaginationProps, KoliBriTabsCallbacks, LabelPropType, LabelWithExpertSlotPropType, LinkOnCallbacksPropType, LinkProps, LinkTargetPropType, ListStyleType, Loading, MaxPropType, NamePropType, OpenPropType, OptionsPropType, OptionsWithOptgroupPropType, Orientation, PaginationHasButton, PaginationPositionPropType, PropColor, RowsPropType, SpinVariantPropType, StencilUnknown, Stringified, SuggestionsPropType, SyncValueBySelectorPropType, TabButtonProps, Toast, ToastState, TooltipAlignPropType, W3CInputValue } from "@public-ui/schema";
export { ButtonOrLinkOrTextWithChildrenProps } from "./types/button-link-text";
export { FontAwesome, FontAwesomeOssPrefix } from "./enums/font-awesome";
export { Icofont } from "./types/icofont";
export { LabelPropType as LabelPropType1, LabelWithExpertSlotPropType as LabelWithExpertSlotPropType1 } from "./types/props/label";
export { Stringified as Stringified1 } from "./types/common";
export { InputTypeOnDefault as InputTypeOnDefault1, Option } from "./types/input/types";
export { W3CInputValue as W3CInputValue1 } from "./types/w3c";
export { Orientation as Orientation1 } from "./types/orientation";
export { Bundesamt, Bundesanstalt, Bundesministerium } from "./enums/bund";
export { HeadingLevel as HeadingLevel1 } from "./types/heading-level";
export { KoliBriToastEventCallbacks } from "./types/toast";
export { AlertType as AlertType1 } from "./components/alert/types";
export namespace Components {
    interface KolAbbr {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolAccordion {
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": string;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Funktionen an.
         */
        "_on"?: KoliBriAccordionCallbacks;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
          * @TODO : Change type back to `OpenPropType` after Stencil#4663 has been resolved.
         */
        "_open"?: boolean;
    }
    interface KolAlert {
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Alerts an.
         */
        "_on"?: KoliBriAlertEventCallbacks;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: AlertType;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: AlertVariant;
    }
    interface KolAlertWc {
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Alerts an.
         */
        "_on"?: KoliBriAlertEventCallbacks;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: AlertType;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: AlertVariant;
    }
    interface KolAvatar {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": string;
        /**
          * Sets the image `src` attribute to the given string.
         */
        "_src"?: string;
    }
    interface KolAvatarWc {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Sets the image `src` attribute to the given string.
         */
        "_src"?: ImageSourcePropType;
    }
    interface KolBadge {
        /**
          * Defines the backgroundColor and foregroundColor.
         */
        "_color"?: Stringified<PropColor>;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
    }
    interface KolBreadcrumb {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links combined with their labels to render.
         */
        "_links": Stringified<BreadcrumbLinkProps[]>;
    }
    interface KolButton {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Defines the callback functions for button events.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
        "getValue": () => Promise<Stringified<StencilUnknown> | undefined>;
    }
    interface KolButtonGroup {
    }
    interface KolButtonGroupWc {
    }
    interface KolButtonLink {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
          * @TODO : Change type back to `AriaExpandedPropType` after Stencil#4663 has been resolved.
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
          * @TODO : Change type back to `AriaSelectedPropType` after Stencil#4663 has been resolved.
         */
        "_ariaSelected"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für die Button-Events an.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        "getValue": () => Promise<Stringified<StencilUnknown> | undefined>;
    }
    /**
     * Internal component that renders an action or text component like a button or a link.
     */
    interface KolButtonLinkTextSwitch {
        /**
          * Die Link-Daten welche diese Komponente verwendet, um die entsprechende Komponente zu rendern.
         */
        "_link": ButtonOrLinkOrTextWithChildrenProps;
    }
    interface KolButtonWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Defines the callback functions for button events.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolCard {
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Defines the event callback functions for the component.
         */
        "_on"?: KoliBriCardEventCallbacks;
    }
    interface KolDetails {
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the callback functions for details.
         */
        "_on"?: EventCallbacks;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
          * @TODO : Change type back to `OpenPropType` after Stencil#4663 has been resolved.
         */
        "_open"?: boolean;
    }
    interface KolForm {
        /**
          * A list of error objects that each describe an issue encountered in the form. Each error object contains a message and a selector for identifying the form element related to the error.
         */
        "_errorList"?: ErrorListPropType[];
        /**
          * Gibt die EventCallback-Funktionen für die Form-Events an.
         */
        "_on"?: KoliBriFormCallbacks;
        /**
          * Defines whether the mandatory-fields-hint should be shown. A string overrides the default text.
         */
        "_requiredText"?: Stringified<boolean>;
    }
    interface KolHeading {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Defines the text of the secondary headline.
         */
        "_secondaryHeadline"?: string;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: HeadingVariantPropType;
    }
    interface KolHeadingWc {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Setzt den Text einer weiteren Überschrift, einen Level kleiner, unter der Ersten.
         */
        "_secondaryHeadline"?: string;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: HeadingVariantPropType;
    }
    interface KolIcon {
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons": string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
    }
    /**
     * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
     */
    interface KolIconFontAwesome {
        /**
          * Setzt die semantische Beschriftung der Komponente.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Font Awesome Icons an. (https://fontawesome.com/v5.15/icons)
         */
        "_icon": FontAwesome;
        /**
          * Deprecated: Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
          * @deprecated Das Styling sollte stets über CSS erfolgen.
         */
        "_part"?: string;
        /**
          * Gibt den Prefix der Font Awesome Icons an. (https://fontawesome.com/v5.15/how-to-use/on-the-web/referencing-icons/basic-use)
         */
        "_prefix": FontAwesomeOssPrefix;
    }
    /**
     * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
     */
    interface KolIconIcofont {
        /**
          * Setzt die semantische Beschriftung der Komponente.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Icofont Icons an. (https://icofont.com/icons)
         */
        "_icon": Icofont;
        /**
          * Deprecated: Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
          * @deprecated Das Styling sollte stets über CSS erfolgen.
         */
        "_part"?: string;
    }
    interface KolImage {
        /**
          * Setzt den alternativen Text.
         */
        "_alt": string;
        /**
          * Defines the loading mode for the image.
         */
        "_loading"?: Loading;
        /**
          * Defines the image sizes for different screen resolutions, supporting _srcset.
         */
        "_sizes"?: string;
        /**
          * Sets the image `src` attribute to the given string.
         */
        "_src": ImageSourcePropType;
        /**
          * Setzt eine Liste von Quell-URLs mit Breiten der Bilder.
         */
        "_srcset"?: string;
    }
    interface KolIndentedText {
    }
    interface KolInput {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines whether the screen-readers should read out the notification.
          * @TODO : Change type back to `AlertPropType` after Stencil#4663 has been resolved.
         */
        "_alert"?: boolean;
        "_currentLength"?: number;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: KoliBriHorizontalIcons;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id": IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob die Komponente kein Label rendern soll.
         */
        "_renderNoLabel"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht den Slotnamen zu bestimmen. Wird nur verwendet, wenn sonst mehrere Slots mit dem gleichen Namen innerhalb eines Shadow DOMs existieren würden.
         */
        "_slotName"?: string;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
    }
    /**
     * @deprecated Use the separated lean-input-adapter from the `@leanup/kolibri-components` package.
     */
    interface KolInputAdapterLeanup {
    }
    interface KolInputCheckbox {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the checkbox is checked or not. Can be read and written.
          * @TODO : Change type back to `CheckedPropType` after Stencil#4663 has been resolved.
         */
        "_checked"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<InputCheckboxIconsProp>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Puts the checkbox in the indeterminate state, does not change the value of _checked.
          * @TODO : Change type back to `IndeterminatePropType` after Stencil#4663 has been resolved.
         */
        "_indeterminate"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: InputCheckboxVariant;
        "getValue": () => Promise<boolean | undefined>;
    }
    interface KolInputColor {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
        "getValue": () => Promise<string | undefined>;
    }
    interface KolInputDate {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the largest possible input value.
         */
        "_max"?: Iso8601 | Date;
        /**
          * Defines the smallest possible input value.
         */
        "_min"?: Iso8601 | Date;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Defines the step size for value changes.
         */
        "_step"?: number;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type": InputDateType;
        /**
          * Defines the value of the input.
         */
        "_value"?: Iso8601 | Date | null;
        "getValue": () => Promise<string | undefined>;
    }
    interface KolInputEmail {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Makes the input accept multiple inputs.
          * @TODO : Change type back to `MultiplePropType` after Stencil#4663 has been resolved.
         */
        "_multiple"?: boolean;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines a validation pattern for the input field.
         */
        "_pattern"?: string;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
        "getValue": () => Promise<string | undefined>;
    }
    interface KolInputFile {
        /**
          * Defines which file formats are accepted.
         */
        "_accept"?: string;
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Makes the input accept multiple inputs.
          * @TODO : Change type back to `MultiplePropType` after Stencil#4663 has been resolved.
         */
        "_multiple"?: boolean;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
        "getValue": () => Promise<FileList | null | undefined>;
    }
    interface KolInputNumber {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the largest possible input value.
         */
        "_max"?: number | Iso8601;
        /**
          * Defines the smallest possible input value.
         */
        "_min"?: number | Iso8601;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Defines the step size for value changes.
         */
        "_step"?: number;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: number | Iso8601 | null;
        "getValue": () => Promise<string | undefined>;
    }
    interface KolInputPassword {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines a validation pattern for the input field.
         */
        "_pattern"?: string;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
        "getValue": () => Promise<string | undefined>;
    }
    interface KolInputRadio {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Options the user can choose from.
         */
        "_options"?: OptionsPropType;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
          * @see Known bug: https://github.com/ionic-team/stencil/issues/3902
         */
        "_value"?: Stringified<W3CInputValue>;
        "getValue": () => Promise<W3CInputValue | undefined>;
    }
    /**
     * @deprecated Die Komponenten Input-Radio-Group und Input-Radio werden zur Komponente Input-Radio zusammengeführt. Verwendet einfach den Tag `<kol-input-radio>` statt `<kol-input-radio-group>`.
     */
    interface KolInputRadioGroup {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label"?: LabelWithExpertSlotPropType1;
        /**
          * Gibt die Liste der Optionen für das Eingabefeld an.
         */
        "_list": Stringified1<Option<W3CInputValue1>[]>;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault1;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation1;
        /**
          * Macht das Eingabeelement zu einem Pflichtfeld.
         */
        "_required"?: boolean;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: W3CInputValue1;
    }
    interface KolInputRange {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the largest possible input value.
         */
        "_max"?: number;
        /**
          * Defines the smallest possible input value.
         */
        "_min"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines the step size for value changes.
         */
        "_step"?: number;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: number;
        "getValue": () => Promise<number | undefined>;
    }
    interface KolInputText {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
          * @TODO : Change type back to `AlertPropType` after Stencil#4663 has been resolved.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines a validation pattern for the input field.
         */
        "_pattern"?: string;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: InputTextType;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
        "getValue": () => Promise<string | undefined>;
    }
    interface KolKolibri {
        /**
          * Defines the color of the logo and label.
         */
        "_color"?: Stringified<PropColor>;
        /**
          * Defines whether the component has a label.
         */
        "_labeled"?: boolean;
    }
    interface KolLink {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the value for the aria-current attribute.
         */
        "_ariaCurrentValue"?: AriaCurrentValuePropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Tells the browser that the link contains a file. Optionally sets the filename.
         */
        "_download"?: DownloadPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Sets the target URI of the link or citation source.
         */
        "_href": HrefPropType;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label"?: LabelWithExpertSlotPropType;
        /**
          * Defines the callback functions for links.
         */
        "_on"?: LinkOnCallbacksPropType;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to open the link.
         */
        "_target"?: LinkTargetPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolLinkButton {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the value for the aria-current attribute.
         */
        "_ariaCurrentValue"?: AriaCurrentValuePropType;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Tells the browser that the link contains a file. Optionally sets the filename.
         */
        "_download"?: DownloadPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the target URI of the link.
         */
        "_href": HrefPropType;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the callback functions for links.
         */
        "_on"?: LinkOnCallbacksPropType;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to open the link.
         */
        "_target"?: LinkTargetPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolLinkGroup {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links to render.
         */
        "_links": Stringified<LinkProps[]>;
        /**
          * Gibt den List-Style-Typen für ungeordnete Listen aus. Wird bei horizontalen LinkGroups als Trenner verwendet
         */
        "_listStyleType"?: ListStyleType;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation;
    }
    interface KolLinkWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the value for the aria-current attribute.
         */
        "_ariaCurrentValue"?: AriaCurrentValuePropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Tells the browser that the link contains a file. Optionally sets the filename.
         */
        "_download"?: DownloadPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Sets the target URI of the link or citation source.
         */
        "_href": HrefPropType;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label"?: LabelWithExpertSlotPropType;
        /**
          * Defines the callback functions for links.
         */
        "_on"?: LinkOnCallbacksPropType;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to open the link.
         */
        "_target"?: LinkTargetPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolLogo {
        /**
          * Gibt die Abkürzung eines Ministeriums, eines Amts oder einer Bundesanstalt an.
         */
        "_org": Bundesministerium | Bundesamt | Bundesanstalt;
    }
    interface KolModal {
        /**
          * Gibt die Referenz auf das auslösende HTML-Element an, wodurch das Modal geöffnet wurde.
         */
        "_activeElement"?: HTMLElement | null;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Gibt die EventCallback-Function für das Schließen des Modals an.
         */
        "_on"?: KoliBriModalEventCallbacks;
        /**
          * Defines the width of the modal. (max-width: 100%)
         */
        "_width"?: string;
    }
    interface KolNav {
        /**
          * Defines if navigation nodes can be collapsed or not. Enabled by default.
          * @TODO : Change type back to `CollapsiblePropType` after Stencil#4663 has been resolved.
         */
        "_collapsible"?: boolean;
        /**
          * Creates a button below the navigation, that toggles _collapsible. Only available for _orientation="vertical".
         */
        "_hasCompactButton"?: boolean;
        /**
          * Shows icons next to the navigation item labels, even when the navigation is not collapsed.
         */
        "_hasIconsWhenExpanded"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links, buttons or texts to render.
         */
        "_links": Stringified<ButtonOrLinkOrTextWithChildrenProps1[]>;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation;
    }
    interface KolPagination {
        /**
          * Defines the amount of pages to show next to the outer arrow buttons.
         */
        "_boundaryCount"?: number;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Defines which navigation buttons to render (first, last, next, previous buttons).
         */
        "_hasButtons"?: boolean | Stringified<PaginationHasButton>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines the maximum number of pages.
         */
        "_max": MaxPropType;
        /**
          * Gibt an, auf welche Callback-Events reagiert werden.
         */
        "_on": KoliBriPaginationButtonCallbacks;
        /**
          * Defines the current page.
         */
        "_page": number;
        /**
          * Defines the amount of entries to show per page.
         */
        "_pageSize": number;
        /**
          * Defines the options for the page-size-select.
         */
        "_pageSizeOptions": Stringified<number[]>;
        /**
          * Defines the amount of pages to show next to the current page.
         */
        "_siblingCount"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolPopoverWc {
        /**
          * Defines the alignment of the tooltip, popover or tabs in relation to the element.
         */
        "_align"?: AlignPropType;
        /**
          * Makes the element show up.
          * @TODO : Change type back to `ShowPropType` after Stencil#4663 has been resolved.
         */
        "_show"?: boolean;
    }
    interface KolProgress {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines at which value the progress display is completed.
         */
        "_max": number;
        /**
          * Defines the unit of the step values (not shown).
         */
        "_unit"?: string;
        /**
          * Defines the progress.
         */
        "_value": number;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: KoliBriProgressVariantType;
    }
    interface KolQuote {
        /**
          * Sets the target URI of the link or citation source.
         */
        "_href": HrefPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: string;
        /**
          * Defines the text of the quote.
         */
        "_quote": string;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: KoliBriQuoteVariant;
    }
    interface KolSelect {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Makes the input accept multiple inputs.
          * @TODO : Change type back to `MultiplePropType` after Stencil#4663 has been resolved.
         */
        "_multiple"?: boolean;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Options the user can choose from, also supporting Optgroup.
         */
        "_options"?: OptionsWithOptgroupPropType;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Defines how many rows of options should be visible at the same time.
         */
        "_rows"?: RowsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: Stringified<W3CInputValue[]>;
        "getValue": () => Promise<Stringified<W3CInputValue[]> | undefined>;
    }
    interface KolSkipNav {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links combined with their labels to render.
         */
        "_links": Stringified<LinkProps[]>;
    }
    interface KolSpan {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the g classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
    }
    interface KolSpanWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Allows to use markdown in the label. Defaults to `false`.
         */
        "_allowMarkdown"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
    }
    interface KolSpin {
        /**
          * Makes the element show up.
          * @TODO : Change type back to `ShowPropType` after Stencil#4663 has been resolved.
         */
        "_show"?: boolean;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: SpinVariantPropType;
    }
    interface KolSplitButton {
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Defines the callback functions for button events.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolSymbol {
        /**
          * Sets the visible or semantic label of the component (e.g. Aria label, Label, Headline, Caption, Summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Dieses Property gibt den String an der angezeigt werden soll.
         */
        "_symbol": string;
    }
    interface KolTable {
        /**
          * Defines whether to allow multi sort.
         */
        "_allowMultiSort"?: boolean;
        /**
          * Defines the primary table data.
         */
        "_data": Stringified<KoliBriTableDataType[]>;
        /**
          * Defines the data for the table footer.
         */
        "_dataFoot"?: Stringified<KoliBriTableDataType[]>;
        /**
          * Defines the horizontal and vertical table headers.
         */
        "_headers": Stringified<KoliBriTableHeaders>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": string;
        /**
          * Defines the table min-width.
         */
        "_minWidth"?: string;
        /**
          * Defines whether to show the data distributed over multiple pages.
         */
        "_pagination"?: boolean | Stringified<KoliBriTablePaginationProps>;
        /**
          * Controls the position of the pagination.
         */
        "_paginationPosition"?: PaginationPositionPropType;
    }
    interface KolTabs {
        /**
          * Defines the position of the tab captions.
         */
        "_align"?: AlignPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Gibt die Liste der Callback-Funktionen an, die auf Events aufgerufen werden sollen.
         */
        "_on"?: KoliBriTabsCallbacks;
        /**
          * Defines which tab is active.
         */
        "_selected"?: number;
        /**
          * Defines the tab captions.
         */
        "_tabs": Stringified<TabButtonProps[]>;
    }
    interface KolTextarea {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Adjusts the height of the element to its content.
          * @TODO : change back to AdjustHeightPropType after stencil #4663 has been resolved
         */
        "_adjustHeight"?: boolean;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Defines whether and in which direction the size of the input can be changed by the user. (https://developer.mozilla.org/de/docs/Web/CSS/resize)
         */
        "_resize"?: CSSResize;
        /**
          * Defines how many rows of text should be visible at the same time.
         */
        "_rows"?: RowsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
        "getValue": () => Promise<string | undefined>;
    }
    /**
     * @deprecated - Use ToastService - see toaster
     */
    interface KolToast {
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Deprecated: Gibt die Beschriftung der Komponente an.
          * @deprecated Use _label.
         */
        "_heading"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType1;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel1;
        /**
          * Gibt die EventCallback-Function für das Schließen des Toasts an.
         */
        "_on"?: KoliBriToastEventCallbacks;
        /**
          * Makes the element show up.
          * @TODO : Change type back to `ShowPropType` after Stencil#4663 has been resolved.
         */
        "_show"?: boolean;
        /**
          * Gibt an, wie viele Millisekunden der Toast eingeblendet werden soll.
         */
        "_showDuration"?: number;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: AlertType1;
    }
    interface KolToastContainer {
        "closeAll": () => Promise<void>;
        "enqueue": (toast: Toast) => Promise<() => void>;
    }
    interface KolTooltipWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the alignment of the tooltip, popover or tabs in relation to the element.
         */
        "_align"?: AlignPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
    }
    interface KolTree {
        /**
          * Defines the label of the tree.
         */
        "_label": LabelPropType;
    }
    interface KolTreeItem {
        /**
          * If set (to true) the tree item is the active one.
         */
        "_active"?: OpenPropType;
        /**
          * This property is used for a link from a reference to the target URL.
         */
        "_href": HrefPropType;
        /**
          * Defines the label of the link.
         */
        "_label": LabelPropType;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
         */
        "_open"?: OpenPropType;
        "collapse": () => Promise<void>;
        "expand": () => Promise<void>;
        "focusLink": () => Promise<void>;
        "isOpen": () => Promise<boolean>;
    }
    interface KolTreeItemWc {
        /**
          * If set (to true) the tree item is the active one.
         */
        "_active"?: OpenPropType;
        /**
          * This property is used for a link from a reference to the target URL.
         */
        "_href": HrefPropType;
        /**
          * Defines the label of the link.
         */
        "_label": LabelPropType;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
         */
        "_open"?: OpenPropType;
        "collapse": () => Promise<void>;
        "expand": () => Promise<void>;
        "focusLink": () => Promise<void>;
        "isOpen": () => Promise<boolean>;
    }
    interface KolTreeWc {
        /**
          * Defines the label of the tree.
         */
        "_label": LabelPropType;
    }
    interface KolVersion {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
    }
}
declare global {
    interface HTMLKolAbbrElement extends Components.KolAbbr, HTMLStencilElement {
    }
    var HTMLKolAbbrElement: {
        prototype: HTMLKolAbbrElement;
        new (): HTMLKolAbbrElement;
    };
    interface HTMLKolAccordionElement extends Components.KolAccordion, HTMLStencilElement {
    }
    var HTMLKolAccordionElement: {
        prototype: HTMLKolAccordionElement;
        new (): HTMLKolAccordionElement;
    };
    interface HTMLKolAlertElement extends Components.KolAlert, HTMLStencilElement {
    }
    var HTMLKolAlertElement: {
        prototype: HTMLKolAlertElement;
        new (): HTMLKolAlertElement;
    };
    interface HTMLKolAlertWcElement extends Components.KolAlertWc, HTMLStencilElement {
    }
    var HTMLKolAlertWcElement: {
        prototype: HTMLKolAlertWcElement;
        new (): HTMLKolAlertWcElement;
    };
    interface HTMLKolAvatarElement extends Components.KolAvatar, HTMLStencilElement {
    }
    var HTMLKolAvatarElement: {
        prototype: HTMLKolAvatarElement;
        new (): HTMLKolAvatarElement;
    };
    interface HTMLKolAvatarWcElement extends Components.KolAvatarWc, HTMLStencilElement {
    }
    var HTMLKolAvatarWcElement: {
        prototype: HTMLKolAvatarWcElement;
        new (): HTMLKolAvatarWcElement;
    };
    interface HTMLKolBadgeElement extends Components.KolBadge, HTMLStencilElement {
    }
    var HTMLKolBadgeElement: {
        prototype: HTMLKolBadgeElement;
        new (): HTMLKolBadgeElement;
    };
    interface HTMLKolBreadcrumbElement extends Components.KolBreadcrumb, HTMLStencilElement {
    }
    var HTMLKolBreadcrumbElement: {
        prototype: HTMLKolBreadcrumbElement;
        new (): HTMLKolBreadcrumbElement;
    };
    interface HTMLKolButtonElement extends Components.KolButton, HTMLStencilElement {
    }
    var HTMLKolButtonElement: {
        prototype: HTMLKolButtonElement;
        new (): HTMLKolButtonElement;
    };
    interface HTMLKolButtonGroupElement extends Components.KolButtonGroup, HTMLStencilElement {
    }
    var HTMLKolButtonGroupElement: {
        prototype: HTMLKolButtonGroupElement;
        new (): HTMLKolButtonGroupElement;
    };
    interface HTMLKolButtonGroupWcElement extends Components.KolButtonGroupWc, HTMLStencilElement {
    }
    var HTMLKolButtonGroupWcElement: {
        prototype: HTMLKolButtonGroupWcElement;
        new (): HTMLKolButtonGroupWcElement;
    };
    interface HTMLKolButtonLinkElement extends Components.KolButtonLink, HTMLStencilElement {
    }
    var HTMLKolButtonLinkElement: {
        prototype: HTMLKolButtonLinkElement;
        new (): HTMLKolButtonLinkElement;
    };
    /**
     * Internal component that renders an action or text component like a button or a link.
     */
    interface HTMLKolButtonLinkTextSwitchElement extends Components.KolButtonLinkTextSwitch, HTMLStencilElement {
    }
    var HTMLKolButtonLinkTextSwitchElement: {
        prototype: HTMLKolButtonLinkTextSwitchElement;
        new (): HTMLKolButtonLinkTextSwitchElement;
    };
    interface HTMLKolButtonWcElement extends Components.KolButtonWc, HTMLStencilElement {
    }
    var HTMLKolButtonWcElement: {
        prototype: HTMLKolButtonWcElement;
        new (): HTMLKolButtonWcElement;
    };
    interface HTMLKolCardElement extends Components.KolCard, HTMLStencilElement {
    }
    var HTMLKolCardElement: {
        prototype: HTMLKolCardElement;
        new (): HTMLKolCardElement;
    };
    interface HTMLKolDetailsElement extends Components.KolDetails, HTMLStencilElement {
    }
    var HTMLKolDetailsElement: {
        prototype: HTMLKolDetailsElement;
        new (): HTMLKolDetailsElement;
    };
    interface HTMLKolFormElement extends Components.KolForm, HTMLStencilElement {
    }
    var HTMLKolFormElement: {
        prototype: HTMLKolFormElement;
        new (): HTMLKolFormElement;
    };
    interface HTMLKolHeadingElement extends Components.KolHeading, HTMLStencilElement {
    }
    var HTMLKolHeadingElement: {
        prototype: HTMLKolHeadingElement;
        new (): HTMLKolHeadingElement;
    };
    interface HTMLKolHeadingWcElement extends Components.KolHeadingWc, HTMLStencilElement {
    }
    var HTMLKolHeadingWcElement: {
        prototype: HTMLKolHeadingWcElement;
        new (): HTMLKolHeadingWcElement;
    };
    interface HTMLKolIconElement extends Components.KolIcon, HTMLStencilElement {
    }
    var HTMLKolIconElement: {
        prototype: HTMLKolIconElement;
        new (): HTMLKolIconElement;
    };
    /**
     * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
     */
    interface HTMLKolIconFontAwesomeElement extends Components.KolIconFontAwesome, HTMLStencilElement {
    }
    var HTMLKolIconFontAwesomeElement: {
        prototype: HTMLKolIconFontAwesomeElement;
        new (): HTMLKolIconFontAwesomeElement;
    };
    /**
     * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
     */
    interface HTMLKolIconIcofontElement extends Components.KolIconIcofont, HTMLStencilElement {
    }
    var HTMLKolIconIcofontElement: {
        prototype: HTMLKolIconIcofontElement;
        new (): HTMLKolIconIcofontElement;
    };
    interface HTMLKolImageElement extends Components.KolImage, HTMLStencilElement {
    }
    var HTMLKolImageElement: {
        prototype: HTMLKolImageElement;
        new (): HTMLKolImageElement;
    };
    interface HTMLKolIndentedTextElement extends Components.KolIndentedText, HTMLStencilElement {
    }
    var HTMLKolIndentedTextElement: {
        prototype: HTMLKolIndentedTextElement;
        new (): HTMLKolIndentedTextElement;
    };
    interface HTMLKolInputElement extends Components.KolInput, HTMLStencilElement {
    }
    var HTMLKolInputElement: {
        prototype: HTMLKolInputElement;
        new (): HTMLKolInputElement;
    };
    /**
     * @deprecated Use the separated lean-input-adapter from the `@leanup/kolibri-components` package.
     */
    interface HTMLKolInputAdapterLeanupElement extends Components.KolInputAdapterLeanup, HTMLStencilElement {
    }
    var HTMLKolInputAdapterLeanupElement: {
        prototype: HTMLKolInputAdapterLeanupElement;
        new (): HTMLKolInputAdapterLeanupElement;
    };
    interface HTMLKolInputCheckboxElement extends Components.KolInputCheckbox, HTMLStencilElement {
    }
    var HTMLKolInputCheckboxElement: {
        prototype: HTMLKolInputCheckboxElement;
        new (): HTMLKolInputCheckboxElement;
    };
    interface HTMLKolInputColorElement extends Components.KolInputColor, HTMLStencilElement {
    }
    var HTMLKolInputColorElement: {
        prototype: HTMLKolInputColorElement;
        new (): HTMLKolInputColorElement;
    };
    interface HTMLKolInputDateElement extends Components.KolInputDate, HTMLStencilElement {
    }
    var HTMLKolInputDateElement: {
        prototype: HTMLKolInputDateElement;
        new (): HTMLKolInputDateElement;
    };
    interface HTMLKolInputEmailElement extends Components.KolInputEmail, HTMLStencilElement {
    }
    var HTMLKolInputEmailElement: {
        prototype: HTMLKolInputEmailElement;
        new (): HTMLKolInputEmailElement;
    };
    interface HTMLKolInputFileElement extends Components.KolInputFile, HTMLStencilElement {
    }
    var HTMLKolInputFileElement: {
        prototype: HTMLKolInputFileElement;
        new (): HTMLKolInputFileElement;
    };
    interface HTMLKolInputNumberElement extends Components.KolInputNumber, HTMLStencilElement {
    }
    var HTMLKolInputNumberElement: {
        prototype: HTMLKolInputNumberElement;
        new (): HTMLKolInputNumberElement;
    };
    interface HTMLKolInputPasswordElement extends Components.KolInputPassword, HTMLStencilElement {
    }
    var HTMLKolInputPasswordElement: {
        prototype: HTMLKolInputPasswordElement;
        new (): HTMLKolInputPasswordElement;
    };
    interface HTMLKolInputRadioElement extends Components.KolInputRadio, HTMLStencilElement {
    }
    var HTMLKolInputRadioElement: {
        prototype: HTMLKolInputRadioElement;
        new (): HTMLKolInputRadioElement;
    };
    /**
     * @deprecated Die Komponenten Input-Radio-Group und Input-Radio werden zur Komponente Input-Radio zusammengeführt. Verwendet einfach den Tag `<kol-input-radio>` statt `<kol-input-radio-group>`.
     */
    interface HTMLKolInputRadioGroupElement extends Components.KolInputRadioGroup, HTMLStencilElement {
    }
    var HTMLKolInputRadioGroupElement: {
        prototype: HTMLKolInputRadioGroupElement;
        new (): HTMLKolInputRadioGroupElement;
    };
    interface HTMLKolInputRangeElement extends Components.KolInputRange, HTMLStencilElement {
    }
    var HTMLKolInputRangeElement: {
        prototype: HTMLKolInputRangeElement;
        new (): HTMLKolInputRangeElement;
    };
    interface HTMLKolInputTextElement extends Components.KolInputText, HTMLStencilElement {
    }
    var HTMLKolInputTextElement: {
        prototype: HTMLKolInputTextElement;
        new (): HTMLKolInputTextElement;
    };
    interface HTMLKolKolibriElement extends Components.KolKolibri, HTMLStencilElement {
    }
    var HTMLKolKolibriElement: {
        prototype: HTMLKolKolibriElement;
        new (): HTMLKolKolibriElement;
    };
    interface HTMLKolLinkElement extends Components.KolLink, HTMLStencilElement {
    }
    var HTMLKolLinkElement: {
        prototype: HTMLKolLinkElement;
        new (): HTMLKolLinkElement;
    };
    interface HTMLKolLinkButtonElement extends Components.KolLinkButton, HTMLStencilElement {
    }
    var HTMLKolLinkButtonElement: {
        prototype: HTMLKolLinkButtonElement;
        new (): HTMLKolLinkButtonElement;
    };
    interface HTMLKolLinkGroupElement extends Components.KolLinkGroup, HTMLStencilElement {
    }
    var HTMLKolLinkGroupElement: {
        prototype: HTMLKolLinkGroupElement;
        new (): HTMLKolLinkGroupElement;
    };
    interface HTMLKolLinkWcElement extends Components.KolLinkWc, HTMLStencilElement {
    }
    var HTMLKolLinkWcElement: {
        prototype: HTMLKolLinkWcElement;
        new (): HTMLKolLinkWcElement;
    };
    interface HTMLKolLogoElement extends Components.KolLogo, HTMLStencilElement {
    }
    var HTMLKolLogoElement: {
        prototype: HTMLKolLogoElement;
        new (): HTMLKolLogoElement;
    };
    interface HTMLKolModalElement extends Components.KolModal, HTMLStencilElement {
    }
    var HTMLKolModalElement: {
        prototype: HTMLKolModalElement;
        new (): HTMLKolModalElement;
    };
    interface HTMLKolNavElement extends Components.KolNav, HTMLStencilElement {
    }
    var HTMLKolNavElement: {
        prototype: HTMLKolNavElement;
        new (): HTMLKolNavElement;
    };
    interface HTMLKolPaginationElement extends Components.KolPagination, HTMLStencilElement {
    }
    var HTMLKolPaginationElement: {
        prototype: HTMLKolPaginationElement;
        new (): HTMLKolPaginationElement;
    };
    interface HTMLKolPopoverWcElement extends Components.KolPopoverWc, HTMLStencilElement {
    }
    var HTMLKolPopoverWcElement: {
        prototype: HTMLKolPopoverWcElement;
        new (): HTMLKolPopoverWcElement;
    };
    interface HTMLKolProgressElement extends Components.KolProgress, HTMLStencilElement {
    }
    var HTMLKolProgressElement: {
        prototype: HTMLKolProgressElement;
        new (): HTMLKolProgressElement;
    };
    interface HTMLKolQuoteElement extends Components.KolQuote, HTMLStencilElement {
    }
    var HTMLKolQuoteElement: {
        prototype: HTMLKolQuoteElement;
        new (): HTMLKolQuoteElement;
    };
    interface HTMLKolSelectElement extends Components.KolSelect, HTMLStencilElement {
    }
    var HTMLKolSelectElement: {
        prototype: HTMLKolSelectElement;
        new (): HTMLKolSelectElement;
    };
    interface HTMLKolSkipNavElement extends Components.KolSkipNav, HTMLStencilElement {
    }
    var HTMLKolSkipNavElement: {
        prototype: HTMLKolSkipNavElement;
        new (): HTMLKolSkipNavElement;
    };
    interface HTMLKolSpanElement extends Components.KolSpan, HTMLStencilElement {
    }
    var HTMLKolSpanElement: {
        prototype: HTMLKolSpanElement;
        new (): HTMLKolSpanElement;
    };
    interface HTMLKolSpanWcElement extends Components.KolSpanWc, HTMLStencilElement {
    }
    var HTMLKolSpanWcElement: {
        prototype: HTMLKolSpanWcElement;
        new (): HTMLKolSpanWcElement;
    };
    interface HTMLKolSpinElement extends Components.KolSpin, HTMLStencilElement {
    }
    var HTMLKolSpinElement: {
        prototype: HTMLKolSpinElement;
        new (): HTMLKolSpinElement;
    };
    interface HTMLKolSplitButtonElement extends Components.KolSplitButton, HTMLStencilElement {
    }
    var HTMLKolSplitButtonElement: {
        prototype: HTMLKolSplitButtonElement;
        new (): HTMLKolSplitButtonElement;
    };
    interface HTMLKolSymbolElement extends Components.KolSymbol, HTMLStencilElement {
    }
    var HTMLKolSymbolElement: {
        prototype: HTMLKolSymbolElement;
        new (): HTMLKolSymbolElement;
    };
    interface HTMLKolTableElement extends Components.KolTable, HTMLStencilElement {
    }
    var HTMLKolTableElement: {
        prototype: HTMLKolTableElement;
        new (): HTMLKolTableElement;
    };
    interface HTMLKolTabsElement extends Components.KolTabs, HTMLStencilElement {
    }
    var HTMLKolTabsElement: {
        prototype: HTMLKolTabsElement;
        new (): HTMLKolTabsElement;
    };
    interface HTMLKolTextareaElement extends Components.KolTextarea, HTMLStencilElement {
    }
    var HTMLKolTextareaElement: {
        prototype: HTMLKolTextareaElement;
        new (): HTMLKolTextareaElement;
    };
    /**
     * @deprecated - Use ToastService - see toaster
     */
    interface HTMLKolToastElement extends Components.KolToast, HTMLStencilElement {
    }
    var HTMLKolToastElement: {
        prototype: HTMLKolToastElement;
        new (): HTMLKolToastElement;
    };
    interface HTMLKolToastContainerElement extends Components.KolToastContainer, HTMLStencilElement {
    }
    var HTMLKolToastContainerElement: {
        prototype: HTMLKolToastContainerElement;
        new (): HTMLKolToastContainerElement;
    };
    interface HTMLKolTooltipWcElement extends Components.KolTooltipWc, HTMLStencilElement {
    }
    var HTMLKolTooltipWcElement: {
        prototype: HTMLKolTooltipWcElement;
        new (): HTMLKolTooltipWcElement;
    };
    interface HTMLKolTreeElement extends Components.KolTree, HTMLStencilElement {
    }
    var HTMLKolTreeElement: {
        prototype: HTMLKolTreeElement;
        new (): HTMLKolTreeElement;
    };
    interface HTMLKolTreeItemElement extends Components.KolTreeItem, HTMLStencilElement {
    }
    var HTMLKolTreeItemElement: {
        prototype: HTMLKolTreeItemElement;
        new (): HTMLKolTreeItemElement;
    };
    interface HTMLKolTreeItemWcElement extends Components.KolTreeItemWc, HTMLStencilElement {
    }
    var HTMLKolTreeItemWcElement: {
        prototype: HTMLKolTreeItemWcElement;
        new (): HTMLKolTreeItemWcElement;
    };
    interface HTMLKolTreeWcElement extends Components.KolTreeWc, HTMLStencilElement {
    }
    var HTMLKolTreeWcElement: {
        prototype: HTMLKolTreeWcElement;
        new (): HTMLKolTreeWcElement;
    };
    interface HTMLKolVersionElement extends Components.KolVersion, HTMLStencilElement {
    }
    var HTMLKolVersionElement: {
        prototype: HTMLKolVersionElement;
        new (): HTMLKolVersionElement;
    };
    interface HTMLElementTagNameMap {
        "kol-abbr": HTMLKolAbbrElement;
        "kol-accordion": HTMLKolAccordionElement;
        "kol-alert": HTMLKolAlertElement;
        "kol-alert-wc": HTMLKolAlertWcElement;
        "kol-avatar": HTMLKolAvatarElement;
        "kol-avatar-wc": HTMLKolAvatarWcElement;
        "kol-badge": HTMLKolBadgeElement;
        "kol-breadcrumb": HTMLKolBreadcrumbElement;
        "kol-button": HTMLKolButtonElement;
        "kol-button-group": HTMLKolButtonGroupElement;
        "kol-button-group-wc": HTMLKolButtonGroupWcElement;
        "kol-button-link": HTMLKolButtonLinkElement;
        "kol-button-link-text-switch": HTMLKolButtonLinkTextSwitchElement;
        "kol-button-wc": HTMLKolButtonWcElement;
        "kol-card": HTMLKolCardElement;
        "kol-details": HTMLKolDetailsElement;
        "kol-form": HTMLKolFormElement;
        "kol-heading": HTMLKolHeadingElement;
        "kol-heading-wc": HTMLKolHeadingWcElement;
        "kol-icon": HTMLKolIconElement;
        "kol-icon-font-awesome": HTMLKolIconFontAwesomeElement;
        "kol-icon-icofont": HTMLKolIconIcofontElement;
        "kol-image": HTMLKolImageElement;
        "kol-indented-text": HTMLKolIndentedTextElement;
        "kol-input": HTMLKolInputElement;
        "kol-input-adapter-leanup": HTMLKolInputAdapterLeanupElement;
        "kol-input-checkbox": HTMLKolInputCheckboxElement;
        "kol-input-color": HTMLKolInputColorElement;
        "kol-input-date": HTMLKolInputDateElement;
        "kol-input-email": HTMLKolInputEmailElement;
        "kol-input-file": HTMLKolInputFileElement;
        "kol-input-number": HTMLKolInputNumberElement;
        "kol-input-password": HTMLKolInputPasswordElement;
        "kol-input-radio": HTMLKolInputRadioElement;
        "kol-input-radio-group": HTMLKolInputRadioGroupElement;
        "kol-input-range": HTMLKolInputRangeElement;
        "kol-input-text": HTMLKolInputTextElement;
        "kol-kolibri": HTMLKolKolibriElement;
        "kol-link": HTMLKolLinkElement;
        "kol-link-button": HTMLKolLinkButtonElement;
        "kol-link-group": HTMLKolLinkGroupElement;
        "kol-link-wc": HTMLKolLinkWcElement;
        "kol-logo": HTMLKolLogoElement;
        "kol-modal": HTMLKolModalElement;
        "kol-nav": HTMLKolNavElement;
        "kol-pagination": HTMLKolPaginationElement;
        "kol-popover-wc": HTMLKolPopoverWcElement;
        "kol-progress": HTMLKolProgressElement;
        "kol-quote": HTMLKolQuoteElement;
        "kol-select": HTMLKolSelectElement;
        "kol-skip-nav": HTMLKolSkipNavElement;
        "kol-span": HTMLKolSpanElement;
        "kol-span-wc": HTMLKolSpanWcElement;
        "kol-spin": HTMLKolSpinElement;
        "kol-split-button": HTMLKolSplitButtonElement;
        "kol-symbol": HTMLKolSymbolElement;
        "kol-table": HTMLKolTableElement;
        "kol-tabs": HTMLKolTabsElement;
        "kol-textarea": HTMLKolTextareaElement;
        "kol-toast": HTMLKolToastElement;
        "kol-toast-container": HTMLKolToastContainerElement;
        "kol-tooltip-wc": HTMLKolTooltipWcElement;
        "kol-tree": HTMLKolTreeElement;
        "kol-tree-item": HTMLKolTreeItemElement;
        "kol-tree-item-wc": HTMLKolTreeItemWcElement;
        "kol-tree-wc": HTMLKolTreeWcElement;
        "kol-version": HTMLKolVersionElement;
    }
}
declare namespace LocalJSX {
    interface KolAbbr {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolAccordion {
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": string;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Funktionen an.
         */
        "_on"?: KoliBriAccordionCallbacks;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
          * @TODO : Change type back to `OpenPropType` after Stencil#4663 has been resolved.
         */
        "_open"?: boolean;
    }
    interface KolAlert {
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Alerts an.
         */
        "_on"?: KoliBriAlertEventCallbacks;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: AlertType;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: AlertVariant;
    }
    interface KolAlertWc {
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Gibt die EventCallback-Function für das Schließen des Alerts an.
         */
        "_on"?: KoliBriAlertEventCallbacks;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: AlertType;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: AlertVariant;
    }
    interface KolAvatar {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": string;
        /**
          * Sets the image `src` attribute to the given string.
         */
        "_src"?: string;
    }
    interface KolAvatarWc {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Sets the image `src` attribute to the given string.
         */
        "_src"?: ImageSourcePropType;
    }
    interface KolBadge {
        /**
          * Defines the backgroundColor and foregroundColor.
         */
        "_color"?: Stringified<PropColor>;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
    }
    interface KolBreadcrumb {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links combined with their labels to render.
         */
        "_links": Stringified<BreadcrumbLinkProps[]>;
    }
    interface KolButton {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Defines the callback functions for button events.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolButtonGroup {
    }
    interface KolButtonGroupWc {
    }
    interface KolButtonLink {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
          * @TODO : Change type back to `AriaExpandedPropType` after Stencil#4663 has been resolved.
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
          * @TODO : Change type back to `AriaSelectedPropType` after Stencil#4663 has been resolved.
         */
        "_ariaSelected"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für die Button-Events an.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
    }
    /**
     * Internal component that renders an action or text component like a button or a link.
     */
    interface KolButtonLinkTextSwitch {
        /**
          * Die Link-Daten welche diese Komponente verwendet, um die entsprechende Komponente zu rendern.
         */
        "_link": ButtonOrLinkOrTextWithChildrenProps;
    }
    interface KolButtonWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Defines the callback functions for button events.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolCard {
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Defines the event callback functions for the component.
         */
        "_on"?: KoliBriCardEventCallbacks;
    }
    interface KolDetails {
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the callback functions for details.
         */
        "_on"?: EventCallbacks;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
          * @TODO : Change type back to `OpenPropType` after Stencil#4663 has been resolved.
         */
        "_open"?: boolean;
    }
    interface KolForm {
        /**
          * A list of error objects that each describe an issue encountered in the form. Each error object contains a message and a selector for identifying the form element related to the error.
         */
        "_errorList"?: ErrorListPropType[];
        /**
          * Gibt die EventCallback-Funktionen für die Form-Events an.
         */
        "_on"?: KoliBriFormCallbacks;
        /**
          * Defines whether the mandatory-fields-hint should be shown. A string overrides the default text.
         */
        "_requiredText"?: Stringified<boolean>;
    }
    interface KolHeading {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Defines the text of the secondary headline.
         */
        "_secondaryHeadline"?: string;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: HeadingVariantPropType;
    }
    interface KolHeadingWc {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel;
        /**
          * Setzt den Text einer weiteren Überschrift, einen Level kleiner, unter der Ersten.
         */
        "_secondaryHeadline"?: string;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: HeadingVariantPropType;
    }
    interface KolIcon {
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons": string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
    }
    /**
     * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
     */
    interface KolIconFontAwesome {
        /**
          * Setzt die semantische Beschriftung der Komponente.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Font Awesome Icons an. (https://fontawesome.com/v5.15/icons)
         */
        "_icon": FontAwesome;
        /**
          * Deprecated: Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
          * @deprecated Das Styling sollte stets über CSS erfolgen.
         */
        "_part"?: string;
        /**
          * Gibt den Prefix der Font Awesome Icons an. (https://fontawesome.com/v5.15/how-to-use/on-the-web/referencing-icons/basic-use)
         */
        "_prefix": FontAwesomeOssPrefix;
    }
    /**
     * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
     */
    interface KolIconIcofont {
        /**
          * Setzt die semantische Beschriftung der Komponente.
         */
        "_ariaLabel": string;
        /**
          * Gibt einen Identifier eines Icofont Icons an. (https://icofont.com/icons)
         */
        "_icon": Icofont;
        /**
          * Deprecated: Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)
          * @deprecated Das Styling sollte stets über CSS erfolgen.
         */
        "_part"?: string;
    }
    interface KolImage {
        /**
          * Setzt den alternativen Text.
         */
        "_alt": string;
        /**
          * Defines the loading mode for the image.
         */
        "_loading"?: Loading;
        /**
          * Defines the image sizes for different screen resolutions, supporting _srcset.
         */
        "_sizes"?: string;
        /**
          * Sets the image `src` attribute to the given string.
         */
        "_src": ImageSourcePropType;
        /**
          * Setzt eine Liste von Quell-URLs mit Breiten der Bilder.
         */
        "_srcset"?: string;
    }
    interface KolIndentedText {
    }
    interface KolInput {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines whether the screen-readers should read out the notification.
          * @TODO : Change type back to `AlertPropType` after Stencil#4663 has been resolved.
         */
        "_alert"?: boolean;
        "_currentLength"?: number;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: KoliBriHorizontalIcons;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id": IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Gibt an, ob die Komponente kein Label rendern soll.
         */
        "_renderNoLabel"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Ermöglicht den Slotnamen zu bestimmen. Wird nur verwendet, wenn sonst mehrere Slots mit dem gleichen Namen innerhalb eines Shadow DOMs existieren würden.
         */
        "_slotName"?: string;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
    }
    /**
     * @deprecated Use the separated lean-input-adapter from the `@leanup/kolibri-components` package.
     */
    interface KolInputAdapterLeanup {
    }
    interface KolInputCheckbox {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the checkbox is checked or not. Can be read and written.
          * @TODO : Change type back to `CheckedPropType` after Stencil#4663 has been resolved.
         */
        "_checked"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<InputCheckboxIconsProp>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Puts the checkbox in the indeterminate state, does not change the value of _checked.
          * @TODO : Change type back to `IndeterminatePropType` after Stencil#4663 has been resolved.
         */
        "_indeterminate"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: InputCheckboxVariant;
    }
    interface KolInputColor {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
    }
    interface KolInputDate {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the largest possible input value.
         */
        "_max"?: Iso8601 | Date;
        /**
          * Defines the smallest possible input value.
         */
        "_min"?: Iso8601 | Date;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Defines the step size for value changes.
         */
        "_step"?: number;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: InputDateType;
        /**
          * Defines the value of the input.
         */
        "_value"?: Iso8601 | Date | null;
    }
    interface KolInputEmail {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Makes the input accept multiple inputs.
          * @TODO : Change type back to `MultiplePropType` after Stencil#4663 has been resolved.
         */
        "_multiple"?: boolean;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines a validation pattern for the input field.
         */
        "_pattern"?: string;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
    }
    interface KolInputFile {
        /**
          * Defines which file formats are accepted.
         */
        "_accept"?: string;
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Makes the input accept multiple inputs.
          * @TODO : Change type back to `MultiplePropType` after Stencil#4663 has been resolved.
         */
        "_multiple"?: boolean;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
    }
    interface KolInputNumber {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the largest possible input value.
         */
        "_max"?: number | Iso8601;
        /**
          * Defines the smallest possible input value.
         */
        "_min"?: number | Iso8601;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Defines the step size for value changes.
         */
        "_step"?: number;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: number | Iso8601 | null;
    }
    interface KolInputPassword {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines a validation pattern for the input field.
         */
        "_pattern"?: string;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
    }
    interface KolInputRadio {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Options the user can choose from.
         */
        "_options"?: OptionsPropType;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
          * @see Known bug: https://github.com/ionic-team/stencil/issues/3902
         */
        "_value"?: Stringified<W3CInputValue>;
    }
    /**
     * @deprecated Die Komponenten Input-Radio-Group und Input-Radio werden zur Komponente Input-Radio zusammengeführt. Verwendet einfach den Tag `<kol-input-radio>` statt `<kol-input-radio-group>`.
     */
    interface KolInputRadioGroup {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label"?: LabelWithExpertSlotPropType1;
        /**
          * Gibt die Liste der Optionen für das Eingabefeld an.
         */
        "_list": Stringified1<Option<W3CInputValue1>[]>;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault1;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation1;
        /**
          * Macht das Eingabeelement zu einem Pflichtfeld.
         */
        "_required"?: boolean;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: W3CInputValue1;
    }
    interface KolInputRange {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the largest possible input value.
         */
        "_max"?: number;
        /**
          * Defines the smallest possible input value.
         */
        "_min"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines the step size for value changes.
         */
        "_step"?: number;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: number;
    }
    interface KolInputText {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
          * @TODO : Change type back to `AlertPropType` after Stencil#4663 has been resolved.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the input can be auto-completed.
         */
        "_autoComplete"?: InputTypeOnOff;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines a validation pattern for the input field.
         */
        "_pattern"?: string;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Allows to add a button with an arbitrary action within the element (_hide-label only).
         */
        "_smartButton"?: Stringified<ButtonProps>;
        /**
          * Suggestions to provide for the input.
         */
        "_suggestions"?: SuggestionsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: InputTextType;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
    }
    interface KolKolibri {
        /**
          * Defines the color of the logo and label.
         */
        "_color"?: Stringified<PropColor>;
        /**
          * Defines whether the component has a label.
         */
        "_labeled"?: boolean;
    }
    interface KolLink {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the value for the aria-current attribute.
         */
        "_ariaCurrentValue"?: AriaCurrentValuePropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Tells the browser that the link contains a file. Optionally sets the filename.
         */
        "_download"?: DownloadPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Sets the target URI of the link or citation source.
         */
        "_href": HrefPropType;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label"?: LabelWithExpertSlotPropType;
        /**
          * Defines the callback functions for links.
         */
        "_on"?: LinkOnCallbacksPropType;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to open the link.
         */
        "_target"?: LinkTargetPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolLinkButton {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the value for the aria-current attribute.
         */
        "_ariaCurrentValue"?: AriaCurrentValuePropType;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Tells the browser that the link contains a file. Optionally sets the filename.
         */
        "_download"?: DownloadPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the target URI of the link.
         */
        "_href": HrefPropType;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the callback functions for links.
         */
        "_on"?: LinkOnCallbacksPropType;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to open the link.
         */
        "_target"?: LinkTargetPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolLinkGroup {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links to render.
         */
        "_links": Stringified<LinkProps[]>;
        /**
          * Gibt den List-Style-Typen für ungeordnete Listen aus. Wird bei horizontalen LinkGroups als Trenner verwendet
         */
        "_listStyleType"?: ListStyleType;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation;
    }
    interface KolLinkWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the value for the aria-current attribute.
         */
        "_ariaCurrentValue"?: AriaCurrentValuePropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Tells the browser that the link contains a file. Optionally sets the filename.
         */
        "_download"?: DownloadPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Sets the target URI of the link or citation source.
         */
        "_href": HrefPropType;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label"?: LabelWithExpertSlotPropType;
        /**
          * Defines the callback functions for links.
         */
        "_on"?: LinkOnCallbacksPropType;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to open the link.
         */
        "_target"?: LinkTargetPropType;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolLogo {
        /**
          * Gibt die Abkürzung eines Ministeriums, eines Amts oder einer Bundesanstalt an.
         */
        "_org": Bundesministerium | Bundesamt | Bundesanstalt;
    }
    interface KolModal {
        /**
          * Gibt die Referenz auf das auslösende HTML-Element an, wodurch das Modal geöffnet wurde.
         */
        "_activeElement"?: HTMLElement | null;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Gibt die EventCallback-Function für das Schließen des Modals an.
         */
        "_on"?: KoliBriModalEventCallbacks;
        /**
          * Defines the width of the modal. (max-width: 100%)
         */
        "_width"?: string;
    }
    interface KolNav {
        /**
          * Defines if navigation nodes can be collapsed or not. Enabled by default.
          * @TODO : Change type back to `CollapsiblePropType` after Stencil#4663 has been resolved.
         */
        "_collapsible"?: boolean;
        /**
          * Creates a button below the navigation, that toggles _collapsible. Only available for _orientation="vertical".
         */
        "_hasCompactButton"?: boolean;
        /**
          * Shows icons next to the navigation item labels, even when the navigation is not collapsed.
         */
        "_hasIconsWhenExpanded"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links, buttons or texts to render.
         */
        "_links": Stringified<ButtonOrLinkOrTextWithChildrenProps1[]>;
        /**
          * Defines whether the orientation of the component is horizontal or vertical.
         */
        "_orientation"?: Orientation;
    }
    interface KolPagination {
        /**
          * Defines the amount of pages to show next to the outer arrow buttons.
         */
        "_boundaryCount"?: number;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Defines which navigation buttons to render (first, last, next, previous buttons).
         */
        "_hasButtons"?: boolean | Stringified<PaginationHasButton>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines the maximum number of pages.
         */
        "_max": MaxPropType;
        /**
          * Gibt an, auf welche Callback-Events reagiert werden.
         */
        "_on": KoliBriPaginationButtonCallbacks;
        /**
          * Defines the current page.
         */
        "_page": number;
        /**
          * Defines the amount of entries to show per page.
         */
        "_pageSize"?: number;
        /**
          * Defines the options for the page-size-select.
         */
        "_pageSizeOptions"?: Stringified<number[]>;
        /**
          * Defines the amount of pages to show next to the current page.
         */
        "_siblingCount"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
    }
    interface KolPopoverWc {
        /**
          * Defines the alignment of the tooltip, popover or tabs in relation to the element.
         */
        "_align"?: AlignPropType;
        /**
          * Makes the element show up.
          * @TODO : Change type back to `ShowPropType` after Stencil#4663 has been resolved.
         */
        "_show"?: boolean;
    }
    interface KolProgress {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType;
        /**
          * Defines at which value the progress display is completed.
         */
        "_max": number;
        /**
          * Defines the unit of the step values (not shown).
         */
        "_unit"?: string;
        /**
          * Defines the progress.
         */
        "_value": number;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: KoliBriProgressVariantType;
    }
    interface KolQuote {
        /**
          * Sets the target URI of the link or citation source.
         */
        "_href": HrefPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: string;
        /**
          * Defines the text of the quote.
         */
        "_quote": string;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: KoliBriQuoteVariant;
    }
    interface KolSelect {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriHorizontalIcons>;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Makes the input accept multiple inputs.
          * @TODO : Change type back to `MultiplePropType` after Stencil#4663 has been resolved.
         */
        "_multiple"?: boolean;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Options the user can choose from, also supporting Optgroup.
         */
        "_options"?: OptionsWithOptgroupPropType;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Defines how many rows of options should be visible at the same time.
         */
        "_rows"?: RowsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: Stringified<W3CInputValue[]>;
    }
    interface KolSkipNav {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the list of links combined with their labels to render.
         */
        "_links": Stringified<LinkProps[]>;
    }
    interface KolSpan {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the g classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
    }
    interface KolSpanWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Allows to use markdown in the label. Defaults to `false`.
         */
        "_allowMarkdown"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: Stringified<KoliBriIconsProp>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
    }
    interface KolSpin {
        /**
          * Makes the element show up.
          * @TODO : Change type back to `ShowPropType` after Stencil#4663 has been resolved.
         */
        "_show"?: boolean;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: SpinVariantPropType;
    }
    interface KolSplitButton {
        /**
          * Defines which elements are controlled by this component. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls)
         */
        "_ariaControls"?: string;
        /**
          * Defines whether the interactive element of the component expanded something. (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
         */
        "_ariaExpanded"?: boolean;
        /**
          * Defines whether the interactive element of the component is selected (e.g. role=tab). (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
         */
        "_ariaSelected"?: boolean;
        /**
          * Defines the custom class attribute if _variant="custom" is set.
         */
        "_customClass"?: CustomClassPropType;
        /**
          * Makes the element not focusable and ignore all events.
         */
        "_disabled"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the icon classnames (e.g. `_icons="fa-solid fa-user"`).
         */
        "_icons"?: IconsPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: string;
        /**
          * Defines the callback functions for button events.
         */
        "_on"?: ButtonCallbacksPropType<StencilUnknown>;
        /**
          * Defines the role of the components primary element.
         */
        "_role"?: AlternativeButtonLinkRolePropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: ButtonTypePropType;
        /**
          * Defines the value that the button emits on click.
         */
        "_value"?: Stringified<StencilUnknown>;
        /**
          * Defines which variant should be used for presentation.
         */
        "_variant"?: ButtonVariantPropType;
    }
    interface KolSymbol {
        /**
          * Sets the visible or semantic label of the component (e.g. Aria label, Label, Headline, Caption, Summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Dieses Property gibt den String an der angezeigt werden soll.
         */
        "_symbol": string;
    }
    interface KolTable {
        /**
          * Defines whether to allow multi sort.
         */
        "_allowMultiSort"?: boolean;
        /**
          * Defines the primary table data.
         */
        "_data": Stringified<KoliBriTableDataType[]>;
        /**
          * Defines the data for the table footer.
         */
        "_dataFoot"?: Stringified<KoliBriTableDataType[]>;
        /**
          * Defines the horizontal and vertical table headers.
         */
        "_headers": Stringified<KoliBriTableHeaders>;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": string;
        /**
          * Defines the table min-width.
         */
        "_minWidth"?: string;
        /**
          * Defines whether to show the data distributed over multiple pages.
         */
        "_pagination"?: boolean | Stringified<KoliBriTablePaginationProps>;
        /**
          * Controls the position of the pagination.
         */
        "_paginationPosition"?: PaginationPositionPropType;
    }
    interface KolTabs {
        /**
          * Defines the position of the tab captions.
         */
        "_align"?: AlignPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
        /**
          * Gibt die Liste der Callback-Funktionen an, die auf Events aufgerufen werden sollen.
         */
        "_on"?: KoliBriTabsCallbacks;
        /**
          * Defines which tab is active.
         */
        "_selected"?: number;
        /**
          * Defines the tab captions.
         */
        "_tabs": Stringified<TabButtonProps[]>;
    }
    interface KolTextarea {
        /**
          * Defines which key combination can be used to trigger or focus the interactive element of the component.
         */
        "_accessKey"?: string;
        /**
          * Adjusts the height of the element to its content.
          * @TODO : change back to AdjustHeightPropType after stencil #4663 has been resolved
         */
        "_adjustHeight"?: boolean;
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Makes the element not focusable and ignore all events.
          * @TODO : Change type back to `DisabledPropType` after Stencil#4663 has been resolved.
         */
        "_disabled"?: boolean;
        /**
          * Defines the error message text.
         */
        "_error"?: string;
        /**
          * Shows the character count on the lower border of the input.
          * @TODO : Change type back to `HasCounterPropType` after Stencil#4663 has been resolved.
         */
        "_hasCounter"?: boolean;
        /**
          * Hides the error message but leaves it in the DOM for the input's aria-describedby.
          * @TODO : Change type back to `HideErrorPropType` after Stencil#4663 has been resolved.
         */
        "_hideError"?: boolean;
        /**
          * Hides the caption by default and displays the caption text with a tooltip when the interactive element is focused or the mouse is over it.
          * @TODO : Change type back to `HideLabelPropType` after Stencil#4663 has been resolved.
         */
        "_hideLabel"?: boolean;
        /**
          * Defines the hint text.
         */
        "_hint"?: string;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.). Set to `false` to enable the expert slot.
         */
        "_label": LabelWithExpertSlotPropType;
        /**
          * Defines the maximum number of input characters.
         */
        "_maxLength"?: number;
        /**
          * Defines the technical name of an input field.
         */
        "_name"?: NamePropType;
        /**
          * Gibt die EventCallback-Funktionen für das Input-Event an.
         */
        "_on"?: InputTypeOnDefault;
        /**
          * Defines the placeholder for input field. To be shown when there's no value.
         */
        "_placeholder"?: string;
        /**
          * Makes the input element read only.
          * @TODO : Change type back to `ReadOnlyPropType` after Stencil#4663 has been resolved.
         */
        "_readOnly"?: boolean;
        /**
          * Makes the input element required.
          * @TODO : Change type back to `RequiredPropType` after Stencil#4663 has been resolved.
         */
        "_required"?: boolean;
        /**
          * Defines whether and in which direction the size of the input can be changed by the user. (https://developer.mozilla.org/de/docs/Web/CSS/resize)
         */
        "_resize"?: CSSResize;
        /**
          * Defines how many rows of text should be visible at the same time.
         */
        "_rows"?: RowsPropType;
        /**
          * Selector for synchronizing the value with another input element.
         */
        "_syncValueBySelector"?: SyncValueBySelectorPropType;
        /**
          * Defines which tab-index the primary element of the component has. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
         */
        "_tabIndex"?: number;
        /**
          * Defines where to show the Tooltip preferably: top, right, bottom or left.
         */
        "_tooltipAlign"?: TooltipAlignPropType;
        /**
          * Shows if the input was touched by a user.
          * @TODO : Change type back to `TouchedPropType` after Stencil#4663 has been resolved.
         */
        "_touched"?: boolean;
        /**
          * Defines the value of the input.
         */
        "_value"?: string;
    }
    /**
     * @deprecated - Use ToastService - see toaster
     */
    interface KolToast {
        /**
          * Defines whether the screen-readers should read out the notification.
         */
        "_alert"?: boolean;
        /**
          * Defines whether the element can be closed.
          * @TODO : Change type back to `HasCloserPropType` after Stencil#4663 has been resolved.
         */
        "_hasCloser"?: boolean;
        /**
          * Deprecated: Gibt die Beschriftung der Komponente an.
          * @deprecated Use _label.
         */
        "_heading"?: string;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label"?: LabelPropType1;
        /**
          * Defines which H-level from 1-6 the heading has. 0 specifies no heading and is shown as bold text.
         */
        "_level"?: HeadingLevel1;
        /**
          * Gibt die EventCallback-Function für das Schließen des Toasts an.
         */
        "_on"?: KoliBriToastEventCallbacks;
        /**
          * Makes the element show up.
          * @TODO : Change type back to `ShowPropType` after Stencil#4663 has been resolved.
         */
        "_show"?: boolean;
        /**
          * Gibt an, wie viele Millisekunden der Toast eingeblendet werden soll.
         */
        "_showDuration"?: number;
        /**
          * Defines either the type of the component or of the components interactive element.
         */
        "_type"?: AlertType1;
    }
    interface KolToastContainer {
    }
    interface KolTooltipWc {
        /**
          * Defines the elements access key.
         */
        "_accessKey"?: AccessKeyPropType;
        /**
          * Defines the alignment of the tooltip, popover or tabs in relation to the element.
         */
        "_align"?: AlignPropType;
        /**
          * Defines the internal ID of the primary component element.
         */
        "_id"?: IdPropType;
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
    }
    interface KolTree {
        /**
          * Defines the label of the tree.
         */
        "_label": LabelPropType;
    }
    interface KolTreeItem {
        /**
          * If set (to true) the tree item is the active one.
         */
        "_active"?: OpenPropType;
        /**
          * This property is used for a link from a reference to the target URL.
         */
        "_href": HrefPropType;
        /**
          * Defines the label of the link.
         */
        "_label": LabelPropType;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
         */
        "_open"?: OpenPropType;
    }
    interface KolTreeItemWc {
        /**
          * If set (to true) the tree item is the active one.
         */
        "_active"?: OpenPropType;
        /**
          * This property is used for a link from a reference to the target URL.
         */
        "_href": HrefPropType;
        /**
          * Defines the label of the link.
         */
        "_label": LabelPropType;
        /**
          * If set (to true) opens/expands the element, closes if not set (or set to false).
         */
        "_open"?: OpenPropType;
    }
    interface KolTreeWc {
        /**
          * Defines the label of the tree.
         */
        "_label": LabelPropType;
    }
    interface KolVersion {
        /**
          * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).
         */
        "_label": LabelPropType;
    }
    interface IntrinsicElements {
        "kol-abbr": KolAbbr;
        "kol-accordion": KolAccordion;
        "kol-alert": KolAlert;
        "kol-alert-wc": KolAlertWc;
        "kol-avatar": KolAvatar;
        "kol-avatar-wc": KolAvatarWc;
        "kol-badge": KolBadge;
        "kol-breadcrumb": KolBreadcrumb;
        "kol-button": KolButton;
        "kol-button-group": KolButtonGroup;
        "kol-button-group-wc": KolButtonGroupWc;
        "kol-button-link": KolButtonLink;
        "kol-button-link-text-switch": KolButtonLinkTextSwitch;
        "kol-button-wc": KolButtonWc;
        "kol-card": KolCard;
        "kol-details": KolDetails;
        "kol-form": KolForm;
        "kol-heading": KolHeading;
        "kol-heading-wc": KolHeadingWc;
        "kol-icon": KolIcon;
        "kol-icon-font-awesome": KolIconFontAwesome;
        "kol-icon-icofont": KolIconIcofont;
        "kol-image": KolImage;
        "kol-indented-text": KolIndentedText;
        "kol-input": KolInput;
        "kol-input-adapter-leanup": KolInputAdapterLeanup;
        "kol-input-checkbox": KolInputCheckbox;
        "kol-input-color": KolInputColor;
        "kol-input-date": KolInputDate;
        "kol-input-email": KolInputEmail;
        "kol-input-file": KolInputFile;
        "kol-input-number": KolInputNumber;
        "kol-input-password": KolInputPassword;
        "kol-input-radio": KolInputRadio;
        "kol-input-radio-group": KolInputRadioGroup;
        "kol-input-range": KolInputRange;
        "kol-input-text": KolInputText;
        "kol-kolibri": KolKolibri;
        "kol-link": KolLink;
        "kol-link-button": KolLinkButton;
        "kol-link-group": KolLinkGroup;
        "kol-link-wc": KolLinkWc;
        "kol-logo": KolLogo;
        "kol-modal": KolModal;
        "kol-nav": KolNav;
        "kol-pagination": KolPagination;
        "kol-popover-wc": KolPopoverWc;
        "kol-progress": KolProgress;
        "kol-quote": KolQuote;
        "kol-select": KolSelect;
        "kol-skip-nav": KolSkipNav;
        "kol-span": KolSpan;
        "kol-span-wc": KolSpanWc;
        "kol-spin": KolSpin;
        "kol-split-button": KolSplitButton;
        "kol-symbol": KolSymbol;
        "kol-table": KolTable;
        "kol-tabs": KolTabs;
        "kol-textarea": KolTextarea;
        "kol-toast": KolToast;
        "kol-toast-container": KolToastContainer;
        "kol-tooltip-wc": KolTooltipWc;
        "kol-tree": KolTree;
        "kol-tree-item": KolTreeItem;
        "kol-tree-item-wc": KolTreeItemWc;
        "kol-tree-wc": KolTreeWc;
        "kol-version": KolVersion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kol-abbr": LocalJSX.KolAbbr & JSXBase.HTMLAttributes<HTMLKolAbbrElement>;
            "kol-accordion": LocalJSX.KolAccordion & JSXBase.HTMLAttributes<HTMLKolAccordionElement>;
            "kol-alert": LocalJSX.KolAlert & JSXBase.HTMLAttributes<HTMLKolAlertElement>;
            "kol-alert-wc": LocalJSX.KolAlertWc & JSXBase.HTMLAttributes<HTMLKolAlertWcElement>;
            "kol-avatar": LocalJSX.KolAvatar & JSXBase.HTMLAttributes<HTMLKolAvatarElement>;
            "kol-avatar-wc": LocalJSX.KolAvatarWc & JSXBase.HTMLAttributes<HTMLKolAvatarWcElement>;
            "kol-badge": LocalJSX.KolBadge & JSXBase.HTMLAttributes<HTMLKolBadgeElement>;
            "kol-breadcrumb": LocalJSX.KolBreadcrumb & JSXBase.HTMLAttributes<HTMLKolBreadcrumbElement>;
            "kol-button": LocalJSX.KolButton & JSXBase.HTMLAttributes<HTMLKolButtonElement>;
            "kol-button-group": LocalJSX.KolButtonGroup & JSXBase.HTMLAttributes<HTMLKolButtonGroupElement>;
            "kol-button-group-wc": LocalJSX.KolButtonGroupWc & JSXBase.HTMLAttributes<HTMLKolButtonGroupWcElement>;
            "kol-button-link": LocalJSX.KolButtonLink & JSXBase.HTMLAttributes<HTMLKolButtonLinkElement>;
            /**
             * Internal component that renders an action or text component like a button or a link.
             */
            "kol-button-link-text-switch": LocalJSX.KolButtonLinkTextSwitch & JSXBase.HTMLAttributes<HTMLKolButtonLinkTextSwitchElement>;
            "kol-button-wc": LocalJSX.KolButtonWc & JSXBase.HTMLAttributes<HTMLKolButtonWcElement>;
            "kol-card": LocalJSX.KolCard & JSXBase.HTMLAttributes<HTMLKolCardElement>;
            "kol-details": LocalJSX.KolDetails & JSXBase.HTMLAttributes<HTMLKolDetailsElement>;
            "kol-form": LocalJSX.KolForm & JSXBase.HTMLAttributes<HTMLKolFormElement>;
            "kol-heading": LocalJSX.KolHeading & JSXBase.HTMLAttributes<HTMLKolHeadingElement>;
            "kol-heading-wc": LocalJSX.KolHeadingWc & JSXBase.HTMLAttributes<HTMLKolHeadingWcElement>;
            "kol-icon": LocalJSX.KolIcon & JSXBase.HTMLAttributes<HTMLKolIconElement>;
            /**
             * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
             */
            "kol-icon-font-awesome": LocalJSX.KolIconFontAwesome & JSXBase.HTMLAttributes<HTMLKolIconFontAwesomeElement>;
            /**
             * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.
             */
            "kol-icon-icofont": LocalJSX.KolIconIcofont & JSXBase.HTMLAttributes<HTMLKolIconIcofontElement>;
            "kol-image": LocalJSX.KolImage & JSXBase.HTMLAttributes<HTMLKolImageElement>;
            "kol-indented-text": LocalJSX.KolIndentedText & JSXBase.HTMLAttributes<HTMLKolIndentedTextElement>;
            "kol-input": LocalJSX.KolInput & JSXBase.HTMLAttributes<HTMLKolInputElement>;
            /**
             * @deprecated Use the separated lean-input-adapter from the `@leanup/kolibri-components` package.
             */
            "kol-input-adapter-leanup": LocalJSX.KolInputAdapterLeanup & JSXBase.HTMLAttributes<HTMLKolInputAdapterLeanupElement>;
            "kol-input-checkbox": LocalJSX.KolInputCheckbox & JSXBase.HTMLAttributes<HTMLKolInputCheckboxElement>;
            "kol-input-color": LocalJSX.KolInputColor & JSXBase.HTMLAttributes<HTMLKolInputColorElement>;
            "kol-input-date": LocalJSX.KolInputDate & JSXBase.HTMLAttributes<HTMLKolInputDateElement>;
            "kol-input-email": LocalJSX.KolInputEmail & JSXBase.HTMLAttributes<HTMLKolInputEmailElement>;
            "kol-input-file": LocalJSX.KolInputFile & JSXBase.HTMLAttributes<HTMLKolInputFileElement>;
            "kol-input-number": LocalJSX.KolInputNumber & JSXBase.HTMLAttributes<HTMLKolInputNumberElement>;
            "kol-input-password": LocalJSX.KolInputPassword & JSXBase.HTMLAttributes<HTMLKolInputPasswordElement>;
            "kol-input-radio": LocalJSX.KolInputRadio & JSXBase.HTMLAttributes<HTMLKolInputRadioElement>;
            /**
             * @deprecated Die Komponenten Input-Radio-Group und Input-Radio werden zur Komponente Input-Radio zusammengeführt. Verwendet einfach den Tag `<kol-input-radio>` statt `<kol-input-radio-group>`.
             */
            "kol-input-radio-group": LocalJSX.KolInputRadioGroup & JSXBase.HTMLAttributes<HTMLKolInputRadioGroupElement>;
            "kol-input-range": LocalJSX.KolInputRange & JSXBase.HTMLAttributes<HTMLKolInputRangeElement>;
            "kol-input-text": LocalJSX.KolInputText & JSXBase.HTMLAttributes<HTMLKolInputTextElement>;
            "kol-kolibri": LocalJSX.KolKolibri & JSXBase.HTMLAttributes<HTMLKolKolibriElement>;
            "kol-link": LocalJSX.KolLink & JSXBase.HTMLAttributes<HTMLKolLinkElement>;
            "kol-link-button": LocalJSX.KolLinkButton & JSXBase.HTMLAttributes<HTMLKolLinkButtonElement>;
            "kol-link-group": LocalJSX.KolLinkGroup & JSXBase.HTMLAttributes<HTMLKolLinkGroupElement>;
            "kol-link-wc": LocalJSX.KolLinkWc & JSXBase.HTMLAttributes<HTMLKolLinkWcElement>;
            "kol-logo": LocalJSX.KolLogo & JSXBase.HTMLAttributes<HTMLKolLogoElement>;
            "kol-modal": LocalJSX.KolModal & JSXBase.HTMLAttributes<HTMLKolModalElement>;
            "kol-nav": LocalJSX.KolNav & JSXBase.HTMLAttributes<HTMLKolNavElement>;
            "kol-pagination": LocalJSX.KolPagination & JSXBase.HTMLAttributes<HTMLKolPaginationElement>;
            "kol-popover-wc": LocalJSX.KolPopoverWc & JSXBase.HTMLAttributes<HTMLKolPopoverWcElement>;
            "kol-progress": LocalJSX.KolProgress & JSXBase.HTMLAttributes<HTMLKolProgressElement>;
            "kol-quote": LocalJSX.KolQuote & JSXBase.HTMLAttributes<HTMLKolQuoteElement>;
            "kol-select": LocalJSX.KolSelect & JSXBase.HTMLAttributes<HTMLKolSelectElement>;
            "kol-skip-nav": LocalJSX.KolSkipNav & JSXBase.HTMLAttributes<HTMLKolSkipNavElement>;
            "kol-span": LocalJSX.KolSpan & JSXBase.HTMLAttributes<HTMLKolSpanElement>;
            "kol-span-wc": LocalJSX.KolSpanWc & JSXBase.HTMLAttributes<HTMLKolSpanWcElement>;
            "kol-spin": LocalJSX.KolSpin & JSXBase.HTMLAttributes<HTMLKolSpinElement>;
            "kol-split-button": LocalJSX.KolSplitButton & JSXBase.HTMLAttributes<HTMLKolSplitButtonElement>;
            "kol-symbol": LocalJSX.KolSymbol & JSXBase.HTMLAttributes<HTMLKolSymbolElement>;
            "kol-table": LocalJSX.KolTable & JSXBase.HTMLAttributes<HTMLKolTableElement>;
            "kol-tabs": LocalJSX.KolTabs & JSXBase.HTMLAttributes<HTMLKolTabsElement>;
            "kol-textarea": LocalJSX.KolTextarea & JSXBase.HTMLAttributes<HTMLKolTextareaElement>;
            /**
             * @deprecated - Use ToastService - see toaster
             */
            "kol-toast": LocalJSX.KolToast & JSXBase.HTMLAttributes<HTMLKolToastElement>;
            "kol-toast-container": LocalJSX.KolToastContainer & JSXBase.HTMLAttributes<HTMLKolToastContainerElement>;
            "kol-tooltip-wc": LocalJSX.KolTooltipWc & JSXBase.HTMLAttributes<HTMLKolTooltipWcElement>;
            "kol-tree": LocalJSX.KolTree & JSXBase.HTMLAttributes<HTMLKolTreeElement>;
            "kol-tree-item": LocalJSX.KolTreeItem & JSXBase.HTMLAttributes<HTMLKolTreeItemElement>;
            "kol-tree-item-wc": LocalJSX.KolTreeItemWc & JSXBase.HTMLAttributes<HTMLKolTreeItemWcElement>;
            "kol-tree-wc": LocalJSX.KolTreeWc & JSXBase.HTMLAttributes<HTMLKolTreeWcElement>;
            "kol-version": LocalJSX.KolVersion & JSXBase.HTMLAttributes<HTMLKolVersionElement>;
        }
    }
}
